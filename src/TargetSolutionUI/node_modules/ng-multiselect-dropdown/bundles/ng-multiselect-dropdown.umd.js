(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/forms'), require('@angular/common')) :
    typeof define === 'function' && define.amd ? define('ng-multiselect-dropdown', ['exports', '@angular/core', '@angular/forms', '@angular/common'], factory) :
    (factory((global['ng-multiselect-dropdown'] = {}),global.ng.core,global.ng.forms,global.ng.common));
}(this, (function (exports,core,forms,common) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var ListItem = (function () {
        function ListItem(source) {
            if (typeof source === 'string') {
                this.id = this.text = source;
            }
            if (typeof source === 'object') {
                this.id = source.id;
                this.text = source.text;
            }
        }
        return ListItem;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var /** @type {?} */ DROPDOWN_CONTROL_VALUE_ACCESSOR = {
        provide: forms.NG_VALUE_ACCESSOR,
        useExisting: core.forwardRef(function () { return MultiSelectComponent; }),
        multi: true
    };
    var /** @type {?} */ noop = function () { };
    var MultiSelectComponent = (function () {
        function MultiSelectComponent(cdr) {
            this.cdr = cdr;
            this._data = [];
            this.selectedItems = [];
            this.isDropdownOpen = false;
            this._placeholder = 'Select';
            this.filter = new ListItem(this.data);
            this.defaultSettings = {
                singleSelection: false,
                idField: 'id',
                textField: 'text',
                enableCheckAll: true,
                selectAllText: 'Select All',
                unSelectAllText: 'UnSelect All',
                allowSearchFilter: false,
                limitSelection: -1,
                clearSearchFilter: true,
                maxHeight: 197,
                itemsShowLimit: 999999999999,
                searchPlaceholderText: 'Search',
                closeDropDownOnSelection: false
            };
            this.disabled = false;
            this.onFilterChange = new core.EventEmitter();
            this.onSelect = new core.EventEmitter();
            this.onDeSelect = new core.EventEmitter();
            this.onSelectAll = new core.EventEmitter();
            this.onDeSelectAll = new core.EventEmitter();
            this.onTouchedCallback = noop;
            this.onChangeCallback = noop;
        }
        Object.defineProperty(MultiSelectComponent.prototype, "placeholder", {
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                if (value) {
                    this._placeholder = value;
                }
                else {
                    this._placeholder = 'Select';
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MultiSelectComponent.prototype, "settings", {
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                if (value) {
                    this._settings = Object.assign(this.defaultSettings, value);
                }
                else {
                    this._settings = Object.assign(this.defaultSettings);
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MultiSelectComponent.prototype, "data", {
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                var _this = this;
                if (!value) {
                    this._data = [];
                }
                else {
                    var /** @type {?} */ _items = value.filter(function (item) {
                        if (typeof item === 'string' || (typeof item === 'object' && item && item[_this._settings.idField] && item[_this._settings.textField])) {
                            return item;
                        }
                    });
                    this._data = _items.map(function (item) {
                        return typeof item === 'string'
                            ? new ListItem(item)
                            : new ListItem({
                                id: item[_this._settings.idField],
                                text: item[_this._settings.textField]
                            });
                    });
                }
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} $event
         * @return {?}
         */
        MultiSelectComponent.prototype.onFilterTextChange = /**
         * @param {?} $event
         * @return {?}
         */
            function ($event) {
                this.onFilterChange.emit($event);
            };
        /**
         * @param {?} $event
         * @param {?} item
         * @return {?}
         */
        MultiSelectComponent.prototype.onItemClick = /**
         * @param {?} $event
         * @param {?} item
         * @return {?}
         */
            function ($event, item) {
                if (this.disabled) {
                    return false;
                }
                var /** @type {?} */ found = this.isSelected(item);
                var /** @type {?} */ allowAdd = this._settings.limitSelection === -1 || (this._settings.limitSelection > 0 && this.selectedItems.length < this._settings.limitSelection);
                if (!found) {
                    if (allowAdd) {
                        this.addSelected(item);
                    }
                }
                else {
                    this.removeSelected(item);
                }
                if (this._settings.singleSelection && this._settings.closeDropDownOnSelection) {
                    this.closeDropdown();
                }
            };
        /**
         * @param {?} value
         * @return {?}
         */
        MultiSelectComponent.prototype.writeValue = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                var _this = this;
                if (value !== undefined && value !== null && value.length > 0) {
                    if (this._settings.singleSelection) {
                        try {
                            if (value.length >= 1) {
                                var /** @type {?} */ firstItem = value[0];
                                this.selectedItems = [
                                    typeof firstItem === 'string'
                                        ? new ListItem(firstItem)
                                        : new ListItem({
                                            id: firstItem[this._settings.idField],
                                            text: firstItem[this._settings.textField]
                                        })
                                ];
                            }
                        }
                        catch (e) {
                            // console.error(e.body.msg);
                        }
                    }
                    else {
                        var /** @type {?} */ _data = value.map(function (item) {
                            return typeof item === 'string'
                                ? new ListItem(item)
                                : new ListItem({
                                    id: item[_this._settings.idField],
                                    text: item[_this._settings.textField]
                                });
                        });
                        if (this._settings.limitSelection > 0) {
                            this.selectedItems = _data.splice(0, this._settings.limitSelection);
                        }
                        else {
                            this.selectedItems = _data;
                        }
                    }
                }
                else {
                    this.selectedItems = [];
                }
                this.onChangeCallback(value);
            };
        // From ControlValueAccessor interface
        /**
         * @param {?} fn
         * @return {?}
         */
        MultiSelectComponent.prototype.registerOnChange = /**
         * @param {?} fn
         * @return {?}
         */
            function (fn) {
                this.onChangeCallback = fn;
            };
        // From ControlValueAccessor interface
        /**
         * @param {?} fn
         * @return {?}
         */
        MultiSelectComponent.prototype.registerOnTouched = /**
         * @param {?} fn
         * @return {?}
         */
            function (fn) {
                this.onTouchedCallback = fn;
            };
        /**
         * @return {?}
         */
        MultiSelectComponent.prototype.onTouched = /**
         * @return {?}
         */
            function () {
                this.closeDropdown();
                this.onTouchedCallback();
            };
        /**
         * @param {?} index
         * @param {?} item
         * @return {?}
         */
        MultiSelectComponent.prototype.trackByFn = /**
         * @param {?} index
         * @param {?} item
         * @return {?}
         */
            function (index, item) {
                return item.id;
            };
        /**
         * @param {?} clickedItem
         * @return {?}
         */
        MultiSelectComponent.prototype.isSelected = /**
         * @param {?} clickedItem
         * @return {?}
         */
            function (clickedItem) {
                var /** @type {?} */ found = false;
                this.selectedItems.forEach(function (item) {
                    if (clickedItem.id === item.id) {
                        found = true;
                    }
                });
                return found;
            };
        /**
         * @return {?}
         */
        MultiSelectComponent.prototype.isLimitSelectionReached = /**
         * @return {?}
         */
            function () {
                return this._settings.limitSelection === this.selectedItems.length;
            };
        /**
         * @return {?}
         */
        MultiSelectComponent.prototype.isAllItemsSelected = /**
         * @return {?}
         */
            function () {
                return this._data.length === this.selectedItems.length;
            };
        /**
         * @return {?}
         */
        MultiSelectComponent.prototype.showButton = /**
         * @return {?}
         */
            function () {
                if (!this._settings.singleSelection) {
                    if (this._settings.limitSelection > 0) {
                        return false;
                    }
                    // this._settings.enableCheckAll = this._settings.limitSelection === -1 ? true : false;
                    return true; // !this._settings.singleSelection && this._settings.enableCheckAll && this._data.length > 0;
                }
                else {
                    // should be disabled in single selection mode
                    return false;
                }
            };
        /**
         * @return {?}
         */
        MultiSelectComponent.prototype.itemShowRemaining = /**
         * @return {?}
         */
            function () {
                return this.selectedItems.length - this._settings.itemsShowLimit;
            };
        /**
         * @param {?} item
         * @return {?}
         */
        MultiSelectComponent.prototype.addSelected = /**
         * @param {?} item
         * @return {?}
         */
            function (item) {
                if (this._settings.singleSelection) {
                    this.selectedItems = [];
                    this.selectedItems.push(item);
                }
                else {
                    this.selectedItems.push(item);
                }
                this.onChangeCallback(this.emittedValue(this.selectedItems));
                this.onSelect.emit(this.emittedValue(item));
            };
        /**
         * @param {?} itemSel
         * @return {?}
         */
        MultiSelectComponent.prototype.removeSelected = /**
         * @param {?} itemSel
         * @return {?}
         */
            function (itemSel) {
                var _this = this;
                this.selectedItems.forEach(function (item) {
                    if (itemSel.id === item.id) {
                        _this.selectedItems.splice(_this.selectedItems.indexOf(item), 1);
                    }
                });
                this.onChangeCallback(this.emittedValue(this.selectedItems));
                this.onDeSelect.emit(this.emittedValue(itemSel));
            };
        /**
         * @param {?} val
         * @return {?}
         */
        MultiSelectComponent.prototype.emittedValue = /**
         * @param {?} val
         * @return {?}
         */
            function (val) {
                var _this = this;
                var /** @type {?} */ selected = [];
                if (Array.isArray(val)) {
                    val.map(function (item) {
                        if (item.id === item.text) {
                            selected.push(item.text);
                        }
                        else {
                            selected.push(_this.objectify(item));
                        }
                    });
                }
                else {
                    if (val) {
                        if (val.id === val.text) {
                            return val.text;
                        }
                        else {
                            return this.objectify(val);
                        }
                    }
                }
                return selected;
            };
        /**
         * @param {?} val
         * @return {?}
         */
        MultiSelectComponent.prototype.objectify = /**
         * @param {?} val
         * @return {?}
         */
            function (val) {
                var /** @type {?} */ obj = {};
                obj[this._settings.idField] = val.id;
                obj[this._settings.textField] = val.text;
                return obj;
            };
        /**
         * @param {?} evt
         * @return {?}
         */
        MultiSelectComponent.prototype.toggleDropdown = /**
         * @param {?} evt
         * @return {?}
         */
            function (evt) {
                evt.preventDefault();
                if (this.disabled && this._settings.singleSelection) {
                    return;
                }
                this.isDropdownOpen = !this.isDropdownOpen;
            };
        /**
         * @return {?}
         */
        MultiSelectComponent.prototype.closeDropdown = /**
         * @return {?}
         */
            function () {
                this.isDropdownOpen = false;
                // clear search text
                if (this._settings.clearSearchFilter) {
                    this.filter.text = '';
                }
            };
        /**
         * @return {?}
         */
        MultiSelectComponent.prototype.toggleSelectAll = /**
         * @return {?}
         */
            function () {
                if (this.disabled) {
                    return false;
                }
                if (!this.isAllItemsSelected()) {
                    this.selectedItems = this._data.slice();
                    this.onSelectAll.emit(this.emittedValue(this.selectedItems));
                }
                else {
                    this.selectedItems = [];
                    this.onDeSelectAll.emit(this.emittedValue(this.selectedItems));
                }
                this.onChangeCallback(this.emittedValue(this.selectedItems));
            };
        MultiSelectComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'ng-multiselect-dropdown',
                        template: "<div tabindex=\"=0\" (blur)=\"onTouched()\" class=\"multiselect-dropdown\" (clickOutside)=\"closeDropdown()\">\n  <div [class.disabled]=\"disabled\">\n    <span tabindex=\"-1\" class=\"dropdown-btn\" (click)=\"toggleDropdown($event)\">\n      <span *ngIf=\"selectedItems.length == 0\">{{_placeholder}}</span>\n      <span class=\"selected-item\" *ngFor=\"let item of selectedItems;trackBy: trackByFn;let k = index\" [hidden]=\"k > _settings.itemsShowLimit-1\">\n        {{item.text}}\n        <a style=\"padding-top:2px;padding-left:2px;color:white\" (click)=\"onItemClick($event,item)\">x</a>\n      </span>\n      <span style=\"float:right !important;padding-right:4px\">\n        <span style=\"padding-right: 6px;\" *ngIf=\"itemShowRemaining()>0\">+{{itemShowRemaining()}}</span>\n        <span [ngClass]=\"isDropdownOpen ? 'dropdown-up' : 'dropdown-down'\"></span>\n      </span>\n    </span>\n  </div>\n  <div class=\"dropdown-list\" [hidden]=\"!isDropdownOpen\">\n    <ul class=\"item1\">\n      <li (click)=\"toggleSelectAll()\" *ngIf=\"_data.length > 0 && !_settings.singleSelection && _settings.enableCheckAll && _settings.limitSelection===-1\"\n        class=\"multiselect-item-checkbox\" style=\"border-bottom: 1px solid #ccc;padding:10px\">\n        <input type=\"checkbox\" [checked]=\"isAllItemsSelected()\" [disabled]=\"disabled || isLimitSelectionReached()\" />\n        <div>{{!isAllItemsSelected() ? _settings.selectAllText : _settings.unSelectAllText}}</div>\n      </li>\n      <li class=\"filter-textbox\" *ngIf=\"_settings.allowSearchFilter\">\n        <input type=\"text\" [readOnly]=\"disabled\" [placeholder]=\"_settings.searchPlaceholderText\" [(ngModel)]=\"filter.text\" (ngModelChange)=\"onFilterTextChange($event)\">\n      </li>\n    </ul>\n    <ul class=\"item2\" [style.maxHeight]=\"_settings.maxHeight+'px'\">\n      <li *ngFor=\"let item of _data | ng2ListFilter:filter; let i = index;\" (click)=\"onItemClick($event,item)\" class=\"multiselect-item-checkbox\">\n        <input type=\"checkbox\" [checked]=\"isSelected(item)\" [disabled]=\"disabled || (isLimitSelectionReached() && !isSelected(item))\"\n        />\n        <div>{{item.text}}</div>\n      </li>\n      <li *ngIf=\"_data.length == 0\">\n        <h5>No data available</h5>\n      </li>\n    </ul>\n  </div>\n</div>",
                        styles: [".multiselect-dropdown{position:relative;width:100%}.multiselect-dropdown .dropdown-btn{display:inline-block;border:1px solid #adadad;width:100%;padding:6px 12px;margin-bottom:0;font-size:14px;font-weight:400;line-height:1.52857143;text-align:left;vertical-align:middle;cursor:pointer;background-image:none;border-radius:4px}.multiselect-dropdown .dropdown-btn .selected-item{border:1px solid #337ab7;margin-right:4px;background:#337ab7;padding:0 5px;color:#fff;border-radius:2px;float:left}.multiselect-dropdown .dropdown-btn .selected-item a{text-decoration:none}.multiselect-dropdown .dropdown-btn .selected-item:hover{box-shadow:1px 1px #959595}.multiselect-dropdown .dropdown-btn .dropdown-down{display:inline-block;top:10px;width:0;height:0;border-top:10px solid #adadad;border-left:10px solid transparent;border-right:10px solid transparent}.multiselect-dropdown .dropdown-btn .dropdown-up{display:inline-block;width:0;height:0;border-bottom:10px solid #adadad;border-left:10px solid transparent;border-right:10px solid transparent}.multiselect-dropdown .disabled>span{background-color:#eceeef}.dropdown-list{position:absolute;padding-top:6px;width:100%;z-index:9999;border:1px solid #ccc;border-radius:3px;background:#fff;margin-top:10px;box-shadow:0 1px 5px #959595}.dropdown-list ul{padding:0;list-style:none;overflow:auto;margin:0}.dropdown-list li{padding:6px 10px;cursor:pointer;text-align:left}.dropdown-list .filter-textbox{border-bottom:1px solid #ccc;position:relative;padding:10px}.dropdown-list .filter-textbox input{border:0;width:100%;padding:0 0 0 26px}.dropdown-list .filter-textbox input:focus{outline:0}.multiselect-item-checkbox input[type=checkbox]{border:0;clip:rect(0 0 0 0);height:1px;margin:-1px;overflow:hidden;padding:0;position:absolute;width:1px}.multiselect-item-checkbox input[type=checkbox]:focus+div:before,.multiselect-item-checkbox input[type=checkbox]:hover+div:before{border-color:#337ab7;background-color:#f2f2f2}.multiselect-item-checkbox input[type=checkbox]:active+div:before{transition-duration:0s}.multiselect-item-checkbox input[type=checkbox]+div{position:relative;padding-left:2em;vertical-align:middle;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer;margin:0;color:#000}.multiselect-item-checkbox input[type=checkbox]+div:before{box-sizing:content-box;content:'';color:#337ab7;position:absolute;top:50%;left:0;width:14px;height:14px;margin-top:-9px;border:2px solid #337ab7;text-align:center;transition:all .4s ease}.multiselect-item-checkbox input[type=checkbox]+div:after{box-sizing:content-box;content:'';position:absolute;-webkit-transform:scale(0);transform:scale(0);-webkit-transform-origin:50%;transform-origin:50%;transition:-webkit-transform .2s ease-out;transition:transform .2s ease-out;transition:transform .2s ease-out,-webkit-transform .2s ease-out;background-color:transparent;top:50%;left:4px;width:8px;height:3px;margin-top:-4px;border-style:solid;border-color:#fff;border-width:0 0 3px 3px;-o-border-image:none;border-image:none;-webkit-transform:rotate(-45deg) scale(0);transform:rotate(-45deg) scale(0)}.multiselect-item-checkbox input[type=checkbox]:disabled+div:before{border-color:#ccc}.multiselect-item-checkbox input[type=checkbox]:disabled:focus+div:before .multiselect-item-checkbox input[type=checkbox]:disabled:hover+div:before{background-color:inherit}.multiselect-item-checkbox input[type=checkbox]:disabled:checked+div:before{background-color:#ccc}.multiselect-item-checkbox input[type=checkbox]:checked+div:after{content:'';transition:-webkit-transform .2s ease-out;transition:transform .2s ease-out;transition:transform .2s ease-out,-webkit-transform .2s ease-out;-webkit-transform:rotate(-45deg) scale(1);transform:rotate(-45deg) scale(1)}.multiselect-item-checkbox input[type=checkbox]:checked+div:before{-webkit-animation:.2s ease-in borderscale;animation:.2s ease-in borderscale;background:#337ab7}@-webkit-keyframes borderscale{50%{box-shadow:0 0 0 2px #337ab7}}@keyframes borderscale{50%{box-shadow:0 0 0 2px #337ab7}}"],
                        providers: [DROPDOWN_CONTROL_VALUE_ACCESSOR],
                        changeDetection: core.ChangeDetectionStrategy.OnPush
                    },] },
        ];
        /** @nocollapse */
        MultiSelectComponent.ctorParameters = function () {
            return [
                { type: core.ChangeDetectorRef, },
            ];
        };
        MultiSelectComponent.propDecorators = {
            "placeholder": [{ type: core.Input },],
            "disabled": [{ type: core.Input },],
            "settings": [{ type: core.Input },],
            "data": [{ type: core.Input },],
            "onFilterChange": [{ type: core.Output, args: ['onFilterChange',] },],
            "onSelect": [{ type: core.Output, args: ['onSelect',] },],
            "onDeSelect": [{ type: core.Output, args: ['onDeSelect',] },],
            "onSelectAll": [{ type: core.Output, args: ['onSelectAll',] },],
            "onDeSelectAll": [{ type: core.Output, args: ['onDeSelectAll',] },],
            "onTouched": [{ type: core.HostListener, args: ['blur',] },],
        };
        return MultiSelectComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var ClickOutsideDirective = (function () {
        function ClickOutsideDirective(_elementRef) {
            this._elementRef = _elementRef;
            this.clickOutside = new core.EventEmitter();
        }
        /**
         * @param {?} event
         * @param {?} targetElement
         * @return {?}
         */
        ClickOutsideDirective.prototype.onClick = /**
         * @param {?} event
         * @param {?} targetElement
         * @return {?}
         */
            function (event, targetElement) {
                if (!targetElement) {
                    return;
                }
                var /** @type {?} */ clickedInside = this._elementRef.nativeElement.contains(targetElement);
                if (!clickedInside) {
                    this.clickOutside.emit(event);
                }
            };
        ClickOutsideDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: '[clickOutside]'
                    },] },
        ];
        /** @nocollapse */
        ClickOutsideDirective.ctorParameters = function () {
            return [
                { type: core.ElementRef, },
            ];
        };
        ClickOutsideDirective.propDecorators = {
            "clickOutside": [{ type: core.Output },],
            "onClick": [{ type: core.HostListener, args: ['document:click', ['$event', '$event.target'],] },],
        };
        return ClickOutsideDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var ListFilterPipe = (function () {
        function ListFilterPipe() {
        }
        /**
         * @param {?} items
         * @param {?} filter
         * @return {?}
         */
        ListFilterPipe.prototype.transform = /**
         * @param {?} items
         * @param {?} filter
         * @return {?}
         */
            function (items, filter) {
                var _this = this;
                if (!items || !filter) {
                    return items;
                }
                return items.filter(function (item) { return _this.applyFilter(item, filter); });
            };
        /**
         * @param {?} item
         * @param {?} filter
         * @return {?}
         */
        ListFilterPipe.prototype.applyFilter = /**
         * @param {?} item
         * @param {?} filter
         * @return {?}
         */
            function (item, filter) {
                return !(filter.text && item.text && item.text.toLowerCase().indexOf(filter.text.toLowerCase()) === -1);
            };
        ListFilterPipe.decorators = [
            { type: core.Pipe, args: [{
                        name: 'ng2ListFilter',
                        pure: false
                    },] },
        ];
        return ListFilterPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NgMultiSelectDropDownModule = (function () {
        function NgMultiSelectDropDownModule() {
        }
        /**
         * @return {?}
         */
        NgMultiSelectDropDownModule.forRoot = /**
         * @return {?}
         */
            function () {
                return {
                    ngModule: NgMultiSelectDropDownModule
                };
            };
        NgMultiSelectDropDownModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [common.CommonModule, forms.FormsModule],
                        declarations: [MultiSelectComponent, ClickOutsideDirective, ListFilterPipe],
                        exports: [MultiSelectComponent]
                    },] },
        ];
        return NgMultiSelectDropDownModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    exports.MultiSelectComponent = MultiSelectComponent;
    exports.NgMultiSelectDropDownModule = NgMultiSelectDropDownModule;
    exports.ɵb = ClickOutsideDirective;
    exports.ɵc = ListFilterPipe;
    exports.ɵa = DROPDOWN_CONTROL_VALUE_ACCESSOR;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,