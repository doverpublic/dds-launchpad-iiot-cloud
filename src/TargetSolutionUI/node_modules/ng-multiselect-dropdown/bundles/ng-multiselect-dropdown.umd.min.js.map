{"version":3,"sources":["ng://ng-multiselect-dropdown/multiselect.model.ts","ng://ng-multiselect-dropdown/multiselect.component.ts","ng://ng-multiselect-dropdown/click-outside.directive.ts","ng://ng-multiselect-dropdown/list-filter.pipe.ts","ng://ng-multiselect-dropdown/ng-multiselect-dropdown.module.ts"],"names":["ListItem","source","this","id","text","DROPDOWN_CONTROL_VALUE_ACCESSOR","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","MultiSelectComponent","multi","noop","cdr","data","singleSelection","idField","textField","enableCheckAll","selectAllText","unSelectAllText","allowSearchFilter","limitSelection","clearSearchFilter","maxHeight","itemsShowLimit","searchPlaceholderText","closeDropDownOnSelection","EventEmitter","prototype","value","_placeholder","_settings","Object","assign","defaultSettings","_items","filter","item","_this","_data","map","onFilterTextChange","$event","onFilterChange","emit","onItemClick","disabled","found","isSelected","allowAdd","selectedItems","length","removeSelected","addSelected","closeDropdown","writeValue","undefined","firstItem","e","splice","onChangeCallback","registerOnChange","fn","registerOnTouched","onTouchedCallback","onTouched","trackByFn","index","clickedItem","forEach","isLimitSelectionReached","isAllItemsSelected","showButton","itemShowRemaining","push","emittedValue","onSelect","itemSel","indexOf","onDeSelect","val","selected","Array","isArray","objectify","obj","toggleDropdown","evt","preventDefault","isDropdownOpen","toggleSelectAll","onDeSelectAll","slice","onSelectAll","Component","args","selector","template","styles","providers","changeDetection","ChangeDetectionStrategy","OnPush","ChangeDetectorRef","Input","Output","HostListener","ClickOutsideDirective","_elementRef","onClick","event","targetElement","nativeElement","contains","clickOutside","Directive","ElementRef","ListFilterPipe","transform","items","applyFilter","toLowerCase","Pipe","name","pure","NgMultiSelectDropDownModule","forRoot","ngModule","NgModule","imports","CommonModule","FormsModule","declarations","exports"],"mappings":"+YAAA,IAAAA,WAIqBC,GACK,iBAAXA,IACTC,KAAKC,GAAKD,KAAKE,KAAOH,GAEF,iBAAXA,IACTC,KAAKC,GAAKF,EAAOE,GACjBD,KAAKE,KAAOH,EAAOG,OCmBZC,EAAuC,CAClDC,QAASC,EAAAA,kBACTC,YAAaC,EAAAA,WAAW,WAAM,OAAAC,IAC9BC,OAAO,GAEHC,EAAO,0BA8HX,SAAAF,EAAoBG,GAAAX,KAAAW,IAAAA,aA/EY,sBACQ,wBAChB,oBACT,qBACI,IAAIb,EAASE,KAAKY,2BACD,CAClCC,iBAAiB,EACjBC,QAAS,KACTC,UAAW,OACXC,gBAAgB,EAChBC,cAAe,aACfC,gBAAiB,eACjBC,mBAAmB,EACnBC,gBAAiB,EACjBC,mBAAmB,EACnBC,UAAW,IACXC,eAAgB,aAChBC,sBAAuB,SACvBC,0BAA0B,kBAWR,sBAiC+C,IAAIC,EAAAA,2BAEhB,IAAIA,EAAAA,6BAEA,IAAIA,EAAAA,8BAEK,IAAIA,EAAAA,gCAEA,IAAIA,EAAAA,oCAEpChB,wBACKA,+BAnDlCF,EAAAmB,UAAA,cAAW,cAACC,GAEnB5B,KAAK6B,aADHD,GAGkB,gEAMbpB,EAAAmB,UAAA,WAAQ,cAACC,GAEhB5B,KAAK8B,UADHF,EACeG,OAAOC,OAAOhC,KAAKiC,gBAAiBL,GAEpCG,OAAOC,OAAOhC,KAAKiC,wEAK7BzB,EAAAmB,UAAA,OAAI,cAACC,cACd,GAAKA,EAEE,CACL,IAAMM,EAASN,EAAMO,OAAO,SAACC,GAC3B,GAAoB,iBAATA,GAAsC,iBAATA,GAAqBA,GAAQA,EAAKC,EAAKP,UAAUhB,UAAYsB,EAAKC,EAAKP,UAAUf,WACvH,OAAOqB,IAGXpC,KAAKsC,MAAQJ,EAAOK,IAClB,SAACH,GACC,OACI,IAAItC,EADQ,iBAATsC,EACUA,EACA,CACXnC,GAAImC,EAAKC,EAAKP,UAAUhB,SACxBZ,KAAMkC,EAAKC,EAAKP,UAAUf,oBAbpCf,KAAKsC,MAAQ,oCAgCjB9B,EAAAmB,UAAAa,mBAAA,SAAmBC,GACjBzC,KAAK0C,eAAeC,KAAKF,IAK3BjC,EAAAmB,UAAAiB,YAAA,SAAYH,EAAaL,GACvB,GAAIpC,KAAK6C,SACP,OAAO,EAGT,IAAMC,EAAQ9C,KAAK+C,WAAWX,GACxBY,GAA8C,IAAnChD,KAAK8B,UAAUV,gBAA0D,EAAhCpB,KAAK8B,UAAUV,gBAAsBpB,KAAKiD,cAAcC,OAASlD,KAAK8B,UAAUV,eACrI0B,EAKH9C,KAAKmD,eAAef,GAJhBY,GACFhD,KAAKoD,YAAYhB,GAKjBpC,KAAK8B,UAAUjB,iBAAmBb,KAAK8B,UAAUL,0BACnDzB,KAAKqD,iBAIT7C,EAAAmB,UAAA2B,WAAA,SAAW1B,GAAX,IAAAS,EAAArC,KACE,GAAI4B,IAAU2B,WAAuB,OAAV3B,GAAiC,EAAfA,EAAMsB,OACjD,GAAIlD,KAAK8B,UAAUjB,gBACjB,IACE,GAAoB,GAAhBe,EAAMsB,OAAa,CACrB,IAAMM,EAAY5B,EAAM,GACxB5B,KAAKiD,cAAgB,CAEf,IAAInD,EADa,iBAAd0D,EACUA,EACA,CACXvD,GAAIuD,EAAUxD,KAAK8B,UAAUhB,SAC7BZ,KAAMsD,EAAUxD,KAAK8B,UAAUf,eAIzC,MAAO0C,QAGJ,CACL,IAAMnB,EAAQV,EAAMW,IAClB,SAACH,GACC,OACI,IAAItC,EADQ,iBAATsC,EACUA,EACA,CACXnC,GAAImC,EAAKC,EAAKP,UAAUhB,SACxBZ,KAAMkC,EAAKC,EAAKP,UAAUf,eAGA,EAAhCf,KAAK8B,UAAUV,eACjBpB,KAAKiD,cAAgBX,EAAMoB,OAAO,EAAG1D,KAAK8B,UAAUV,gBAEpDpB,KAAKiD,cAAgBX,OAIzBtC,KAAKiD,cAAgB,GAEvBjD,KAAK2D,iBAAiB/B,IAIxBpB,EAAAmB,UAAAiC,iBAAA,SAAiBC,GACf7D,KAAK2D,iBAAmBE,GAI1BrD,EAAAmB,UAAAmC,kBAAA,SAAkBD,GAChB7D,KAAK+D,kBAAoBF,GAKpBrD,EAAAmB,UAAAqC,qBACLhE,KAAKqD,gBACLrD,KAAK+D,qBAGPvD,EAAAmB,UAAAsC,UAAA,SAAUC,EAAO9B,GACf,OAAOA,EAAKnC,IAGdO,EAAAmB,UAAAoB,WAAA,SAAWoB,GACT,IAAIrB,GAAQ,EAMZ,OALA9C,KAAKiD,cAAcmB,QAAQ,SAAAhC,GACrB+B,EAAYlE,KAAOmC,EAAKnC,KAC1B6C,GAAQ,KAGLA,GAGTtC,EAAAmB,UAAA0C,wBAAA,WACE,OAAOrE,KAAK8B,UAAUV,iBAAmBpB,KAAKiD,cAAcC,QAG9D1C,EAAAmB,UAAA2C,mBAAA,WACE,OAAOtE,KAAKsC,MAAMY,SAAWlD,KAAKiD,cAAcC,QAGlD1C,EAAAmB,UAAA4C,WAAA,WACE,OAAKvE,KAAK8B,UAAUjB,mBACkB,EAAhCb,KAAK8B,UAAUV,iBAWvBZ,EAAAmB,UAAA6C,kBAAA,WACE,OAAOxE,KAAKiD,cAAcC,OAASlD,KAAK8B,UAAUP,gBAGpDf,EAAAmB,UAAAyB,YAAA,SAAYhB,GACNpC,KAAK8B,UAAUjB,kBACjBb,KAAKiD,cAAgB,IACrBjD,KAAKiD,cAAcwB,KAAKrC,GAI1BpC,KAAK2D,iBAAiB3D,KAAK0E,aAAa1E,KAAKiD,gBAC7CjD,KAAK2E,SAAShC,KAAK3C,KAAK0E,aAAatC,KAGvC5B,EAAAmB,UAAAwB,eAAA,SAAeyB,GAAf,IAAAvC,EAAArC,KACEA,KAAKiD,cAAcmB,QAAQ,SAAAhC,GACrBwC,EAAQ3E,KAAOmC,EAAKnC,IACtBoC,EAAKY,cAAcS,OAAOrB,EAAKY,cAAc4B,QAAQzC,GAAO,KAGhEpC,KAAK2D,iBAAiB3D,KAAK0E,aAAa1E,KAAKiD,gBAC7CjD,KAAK8E,WAAWnC,KAAK3C,KAAK0E,aAAaE,KAGzCpE,EAAAmB,UAAA+C,aAAA,SAAaK,GAAb,IAAA1C,EAAArC,KACQgF,EAAW,GACjB,GAAIC,MAAMC,QAAQH,GAChBA,EAAIxC,IAAI,SAAAH,GACFA,EAAKnC,KAAOmC,EAAKlC,KACnB8E,EAASP,KAAKrC,EAAKlC,MAEnB8E,EAASP,KAAKpC,EAAK8C,UAAU/C,WAIjC,GAAI2C,EACF,OAAIA,EAAI9E,KAAO8E,EAAI7E,KACV6E,EAAI7E,KAEJF,KAAKmF,UAAUJ,GAI5B,OAAOC,GAGTxE,EAAAmB,UAAAwD,UAAA,SAAUJ,GACR,IAAMK,EAAM,GAGZ,OAFAA,EAAIpF,KAAK8B,UAAUhB,SAAWiE,EAAI9E,GAClCmF,EAAIpF,KAAK8B,UAAUf,WAAagE,EAAI7E,KAC7BkF,GAGT5E,EAAAmB,UAAA0D,eAAA,SAAeC,GACbA,EAAIC,iBACAvF,KAAK6C,UAAY7C,KAAK8B,UAAUjB,kBAGpCb,KAAKwF,gBAAkBxF,KAAKwF,iBAG9BhF,EAAAmB,UAAA0B,cAAA,WACErD,KAAKwF,gBAAiB,EAElBxF,KAAK8B,UAAUT,oBACjBrB,KAAKmC,OAAOjC,KAAO,KAIvBM,EAAAmB,UAAA8D,gBAAA,WACE,GAAIzF,KAAK6C,SACP,OAAO,EAEJ7C,KAAKsE,sBAIRtE,KAAKiD,cAAgB,GACrBjD,KAAK0F,cAAc/C,KAAK3C,KAAK0E,aAAa1E,KAAKiD,kBAJ/CjD,KAAKiD,cAAgBjD,KAAKsC,MAAMqD,QAChC3F,KAAK4F,YAAYjD,KAAK3C,KAAK0E,aAAa1E,KAAKiD,iBAK/CjD,KAAK2D,iBAAiB3D,KAAK0E,aAAa1E,KAAKiD,qCA9ThD4C,EAAAA,UAASC,KAAA,CAAC,CACTC,SAAU,0BACVC,SAAU,0rEAqCVC,OAAQ,CAAC,k+HACTC,UAAW,CAAC/F,GACZgG,gBAAiBC,EAAAA,wBAAwBC,oDArEzCC,EAAAA,0DA8FCC,EAAAA,wBAQAA,EAAAA,wBAEAA,EAAAA,oBASAA,EAAAA,8BAsBAC,EAAAA,OAAMV,KAAA,CAAC,oCAEPU,EAAAA,OAAMV,KAAA,CAAC,gCAEPU,EAAAA,OAAMV,KAAA,CAAC,mCAEPU,EAAAA,OAAMV,KAAA,CAAC,sCAEPU,EAAAA,OAAMV,KAAA,CAAC,oCAiFPW,EAAAA,aAAYX,KAAA,CAAC,gBCxOhBY,EAAA,WAMI,SAAAA,EAAoBC,GAAA3G,KAAA2G,YAAAA,oBAIE,IAAIjF,EAAAA,oBAGnBgF,EAAA/E,UAAAiF,iBAAQC,EAAmBC,GACzBA,IAIiB9G,KAAK2G,YAAYI,cAAcC,SAASF,IAE1D9G,KAAKiH,aAAatE,KAAKkE,yBAlBlCK,EAAAA,UAASpB,KAAA,CAAC,CACPC,SAAU,8DAHKoB,EAAAA,oDASdX,EAAAA,wBAGAC,EAAAA,aAAYX,KAAA,CAAC,iBAAkB,CAAC,SAAU,uBAZ/C,GCAAsB,EAAA,gCASIA,EAAAzF,UAAA0F,UAAA,SAAUC,EAAmBnF,GAA7B,IAAAE,EAAArC,KACI,OAAKsH,GAAUnF,EAGRmF,EAAMnF,OAAO,SAACC,GAAmB,OAAAC,EAAKkF,YAAYnF,EAAMD,KAFpDmF,GAKfF,EAAAzF,UAAA4F,YAAA,SAAYnF,EAAgBD,GACxB,QAASA,EAAOjC,MAAQkC,EAAKlC,OAAwE,IAAhEkC,EAAKlC,KAAKsH,cAAc3C,QAAQ1C,EAAOjC,KAAKsH,qCAbxFC,EAAAA,KAAI3B,KAAA,CAAC,CACF4B,KAAM,gBACNC,MAAM,QANV,GCAAC,EAAA,gCAcWA,EAAAC,QAAP,WACE,MAAO,CACLC,SAAUF,wBATjBG,EAAAA,SAAQjC,KAAA,CAAC,CACRkC,QAAS,CAACC,EAAAA,aAAcC,EAAAA,aACxBC,aAAc,CAAC3H,EAAsBkG,EAAuBU,GAC5DgB,QAAS,CAAC5H,SAVZ","sourcesContent":["export class ListItem {\r\n  id: String;\r\n  text: String;\r\n\r\n  public constructor(source: any) {\r\n    if (typeof source === 'string') {\r\n      this.id = this.text = source;\r\n    }\r\n    if (typeof source === 'object') {\r\n      this.id = source.id;\r\n      this.text = source.text;\r\n    }\r\n  }\r\n}\r\nexport class MyException {\r\n  status: number;\r\n  body: any;\r\n  constructor(status: number, body: any) {\r\n    this.status = status;\r\n    this.body = body;\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  HostListener,\r\n  forwardRef,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef\r\n} from '@angular/core';\r\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor } from '@angular/forms';\r\nimport { ListItem } from './multiselect.model';\r\n\r\nexport interface DropdownSettings {\r\n  singleSelection: boolean;\r\n  idField?: string;\r\n  textField?: string;\r\n  enableCheckAll: boolean;\r\n  selectAllText?: string;\r\n  unSelectAllText?: string;\r\n  allowSearchFilter?: boolean;\r\n  clearSearchFilter?: boolean;\r\n  maxHeight?: number;\r\n  itemsShowLimit?: number;\r\n  limitSelection?: number;\r\n  searchPlaceholderText?: string;\r\n  closeDropDownOnSelection?: boolean;\r\n}\r\n\r\nexport const DROPDOWN_CONTROL_VALUE_ACCESSOR: any = {\r\n  provide: NG_VALUE_ACCESSOR,\r\n  useExisting: forwardRef(() => MultiSelectComponent),\r\n  multi: true\r\n};\r\nconst noop = () => {};\r\n\r\n@Component({\r\n  selector: 'ng-multiselect-dropdown',\r\n  template: `<div tabindex=\"=0\" (blur)=\"onTouched()\" class=\"multiselect-dropdown\" (clickOutside)=\"closeDropdown()\">\r\n  <div [class.disabled]=\"disabled\">\r\n    <span tabindex=\"-1\" class=\"dropdown-btn\" (click)=\"toggleDropdown($event)\">\r\n      <span *ngIf=\"selectedItems.length == 0\">{{_placeholder}}</span>\r\n      <span class=\"selected-item\" *ngFor=\"let item of selectedItems;trackBy: trackByFn;let k = index\" [hidden]=\"k > _settings.itemsShowLimit-1\">\r\n        {{item.text}}\r\n        <a style=\"padding-top:2px;padding-left:2px;color:white\" (click)=\"onItemClick($event,item)\">x</a>\r\n      </span>\r\n      <span style=\"float:right !important;padding-right:4px\">\r\n        <span style=\"padding-right: 6px;\" *ngIf=\"itemShowRemaining()>0\">+{{itemShowRemaining()}}</span>\r\n        <span [ngClass]=\"isDropdownOpen ? 'dropdown-up' : 'dropdown-down'\"></span>\r\n      </span>\r\n    </span>\r\n  </div>\r\n  <div class=\"dropdown-list\" [hidden]=\"!isDropdownOpen\">\r\n    <ul class=\"item1\">\r\n      <li (click)=\"toggleSelectAll()\" *ngIf=\"_data.length > 0 && !_settings.singleSelection && _settings.enableCheckAll && _settings.limitSelection===-1\"\r\n        class=\"multiselect-item-checkbox\" style=\"border-bottom: 1px solid #ccc;padding:10px\">\r\n        <input type=\"checkbox\" [checked]=\"isAllItemsSelected()\" [disabled]=\"disabled || isLimitSelectionReached()\" />\r\n        <div>{{!isAllItemsSelected() ? _settings.selectAllText : _settings.unSelectAllText}}</div>\r\n      </li>\r\n      <li class=\"filter-textbox\" *ngIf=\"_settings.allowSearchFilter\">\r\n        <input type=\"text\" [readOnly]=\"disabled\" [placeholder]=\"_settings.searchPlaceholderText\" [(ngModel)]=\"filter.text\" (ngModelChange)=\"onFilterTextChange($event)\">\r\n      </li>\r\n    </ul>\r\n    <ul class=\"item2\" [style.maxHeight]=\"_settings.maxHeight+'px'\">\r\n      <li *ngFor=\"let item of _data | ng2ListFilter:filter; let i = index;\" (click)=\"onItemClick($event,item)\" class=\"multiselect-item-checkbox\">\r\n        <input type=\"checkbox\" [checked]=\"isSelected(item)\" [disabled]=\"disabled || (isLimitSelectionReached() && !isSelected(item))\"\r\n        />\r\n        <div>{{item.text}}</div>\r\n      </li>\r\n      <li *ngIf=\"_data.length == 0\">\r\n        <h5>No data available</h5>\r\n      </li>\r\n    </ul>\r\n  </div>\r\n</div>`,\r\n  styles: [`.multiselect-dropdown{position:relative;width:100%}.multiselect-dropdown .dropdown-btn{display:inline-block;border:1px solid #adadad;width:100%;padding:6px 12px;margin-bottom:0;font-size:14px;font-weight:400;line-height:1.52857143;text-align:left;vertical-align:middle;cursor:pointer;background-image:none;border-radius:4px}.multiselect-dropdown .dropdown-btn .selected-item{border:1px solid #337ab7;margin-right:4px;background:#337ab7;padding:0 5px;color:#fff;border-radius:2px;float:left}.multiselect-dropdown .dropdown-btn .selected-item a{text-decoration:none}.multiselect-dropdown .dropdown-btn .selected-item:hover{box-shadow:1px 1px #959595}.multiselect-dropdown .dropdown-btn .dropdown-down{display:inline-block;top:10px;width:0;height:0;border-top:10px solid #adadad;border-left:10px solid transparent;border-right:10px solid transparent}.multiselect-dropdown .dropdown-btn .dropdown-up{display:inline-block;width:0;height:0;border-bottom:10px solid #adadad;border-left:10px solid transparent;border-right:10px solid transparent}.multiselect-dropdown .disabled>span{background-color:#eceeef}.dropdown-list{position:absolute;padding-top:6px;width:100%;z-index:9999;border:1px solid #ccc;border-radius:3px;background:#fff;margin-top:10px;box-shadow:0 1px 5px #959595}.dropdown-list ul{padding:0;list-style:none;overflow:auto;margin:0}.dropdown-list li{padding:6px 10px;cursor:pointer;text-align:left}.dropdown-list .filter-textbox{border-bottom:1px solid #ccc;position:relative;padding:10px}.dropdown-list .filter-textbox input{border:0;width:100%;padding:0 0 0 26px}.dropdown-list .filter-textbox input:focus{outline:0}.multiselect-item-checkbox input[type=checkbox]{border:0;clip:rect(0 0 0 0);height:1px;margin:-1px;overflow:hidden;padding:0;position:absolute;width:1px}.multiselect-item-checkbox input[type=checkbox]:focus+div:before,.multiselect-item-checkbox input[type=checkbox]:hover+div:before{border-color:#337ab7;background-color:#f2f2f2}.multiselect-item-checkbox input[type=checkbox]:active+div:before{transition-duration:0s}.multiselect-item-checkbox input[type=checkbox]+div{position:relative;padding-left:2em;vertical-align:middle;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer;margin:0;color:#000}.multiselect-item-checkbox input[type=checkbox]+div:before{box-sizing:content-box;content:'';color:#337ab7;position:absolute;top:50%;left:0;width:14px;height:14px;margin-top:-9px;border:2px solid #337ab7;text-align:center;transition:all .4s ease}.multiselect-item-checkbox input[type=checkbox]+div:after{box-sizing:content-box;content:'';position:absolute;-webkit-transform:scale(0);transform:scale(0);-webkit-transform-origin:50%;transform-origin:50%;transition:-webkit-transform .2s ease-out;transition:transform .2s ease-out;transition:transform .2s ease-out,-webkit-transform .2s ease-out;background-color:transparent;top:50%;left:4px;width:8px;height:3px;margin-top:-4px;border-style:solid;border-color:#fff;border-width:0 0 3px 3px;-o-border-image:none;border-image:none;-webkit-transform:rotate(-45deg) scale(0);transform:rotate(-45deg) scale(0)}.multiselect-item-checkbox input[type=checkbox]:disabled+div:before{border-color:#ccc}.multiselect-item-checkbox input[type=checkbox]:disabled:focus+div:before .multiselect-item-checkbox input[type=checkbox]:disabled:hover+div:before{background-color:inherit}.multiselect-item-checkbox input[type=checkbox]:disabled:checked+div:before{background-color:#ccc}.multiselect-item-checkbox input[type=checkbox]:checked+div:after{content:'';transition:-webkit-transform .2s ease-out;transition:transform .2s ease-out;transition:transform .2s ease-out,-webkit-transform .2s ease-out;-webkit-transform:rotate(-45deg) scale(1);transform:rotate(-45deg) scale(1)}.multiselect-item-checkbox input[type=checkbox]:checked+div:before{-webkit-animation:.2s ease-in borderscale;animation:.2s ease-in borderscale;background:#337ab7}@-webkit-keyframes borderscale{50%{box-shadow:0 0 0 2px #337ab7}}@keyframes borderscale{50%{box-shadow:0 0 0 2px #337ab7}}`],\r\n  providers: [DROPDOWN_CONTROL_VALUE_ACCESSOR],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class MultiSelectComponent implements ControlValueAccessor {\r\n  public _settings: DropdownSettings;\r\n  public _data: Array<ListItem> = [];\r\n  public selectedItems: Array<ListItem> = [];\r\n  public isDropdownOpen = false;\r\n  _placeholder = 'Select';\r\n  filter: ListItem = new ListItem(this.data);\r\n  defaultSettings: DropdownSettings = {\r\n    singleSelection: false,\r\n    idField: 'id',\r\n    textField: 'text',\r\n    enableCheckAll: true,\r\n    selectAllText: 'Select All',\r\n    unSelectAllText: 'UnSelect All',\r\n    allowSearchFilter: false,\r\n    limitSelection: -1,\r\n    clearSearchFilter: true,\r\n    maxHeight: 197,\r\n    itemsShowLimit: 999999999999,\r\n    searchPlaceholderText: 'Search',\r\n    closeDropDownOnSelection: false\r\n  };\r\n\r\n  @Input()\r\n  public set placeholder(value: string) {\r\n    if (value) {\r\n      this._placeholder = value;\r\n    } else {\r\n      this._placeholder = 'Select';\r\n    }\r\n  }\r\n  @Input() disabled = false;\r\n\r\n  @Input()\r\n  public set settings(value: DropdownSettings) {\r\n    if (value) {\r\n      this._settings = Object.assign(this.defaultSettings, value);\r\n    } else {\r\n      this._settings = Object.assign(this.defaultSettings);\r\n    }\r\n  }\r\n\r\n  @Input()\r\n  public set data(value: Array<any>) {\r\n    if (!value) {\r\n      this._data = [];\r\n    } else {\r\n      const _items = value.filter((item: any) => {\r\n        if (typeof item === 'string' || (typeof item === 'object' && item && item[this._settings.idField] && item[this._settings.textField])) {\r\n          return item;\r\n        }\r\n      });\r\n      this._data = _items.map(\r\n        (item: any) =>\r\n          typeof item === 'string'\r\n            ? new ListItem(item)\r\n            : new ListItem({\r\n                id: item[this._settings.idField],\r\n                text: item[this._settings.textField]\r\n              })\r\n      );\r\n    }\r\n  }\r\n\r\n  @Output('onFilterChange') onFilterChange: EventEmitter<ListItem> = new EventEmitter<any>();\r\n\r\n  @Output('onSelect') onSelect: EventEmitter<ListItem> = new EventEmitter<any>();\r\n\r\n  @Output('onDeSelect') onDeSelect: EventEmitter<ListItem> = new EventEmitter<any>();\r\n\r\n  @Output('onSelectAll') onSelectAll: EventEmitter<Array<ListItem>> = new EventEmitter<Array<any>>();\r\n\r\n  @Output('onDeSelectAll') onDeSelectAll: EventEmitter<Array<ListItem>> = new EventEmitter<Array<any>>();\r\n\r\n  private onTouchedCallback: () => void = noop;\r\n  private onChangeCallback: (_: any) => void = noop;\r\n\r\n  onFilterTextChange($event) {\r\n    this.onFilterChange.emit($event);\r\n  }\r\n\r\n  constructor(private cdr: ChangeDetectorRef) {}\r\n\r\n  onItemClick($event: any, item: ListItem) {\r\n    if (this.disabled) {\r\n      return false;\r\n    }\r\n\r\n    const found = this.isSelected(item);\r\n    const allowAdd = this._settings.limitSelection === -1 || (this._settings.limitSelection > 0 && this.selectedItems.length < this._settings.limitSelection);\r\n    if (!found) {\r\n      if (allowAdd) {\r\n        this.addSelected(item);\r\n      }\r\n    } else {\r\n      this.removeSelected(item);\r\n    }\r\n    if (this._settings.singleSelection && this._settings.closeDropDownOnSelection) {\r\n      this.closeDropdown();\r\n    }\r\n  }\r\n\r\n  writeValue(value: any) {\r\n    if (value !== undefined && value !== null && value.length > 0) {\r\n      if (this._settings.singleSelection) {\r\n        try {\r\n          if (value.length >= 1) {\r\n            const firstItem = value[0];\r\n            this.selectedItems = [\r\n              typeof firstItem === 'string'\r\n                ? new ListItem(firstItem)\r\n                : new ListItem({\r\n                    id: firstItem[this._settings.idField],\r\n                    text: firstItem[this._settings.textField]\r\n                  })\r\n            ];\r\n          }\r\n        } catch (e) {\r\n          // console.error(e.body.msg);\r\n        }\r\n      } else {\r\n        const _data = value.map(\r\n          (item: any) =>\r\n            typeof item === 'string'\r\n              ? new ListItem(item)\r\n              : new ListItem({\r\n                  id: item[this._settings.idField],\r\n                  text: item[this._settings.textField]\r\n                })\r\n        );\r\n        if (this._settings.limitSelection > 0) {\r\n          this.selectedItems = _data.splice(0, this._settings.limitSelection);\r\n        } else {\r\n          this.selectedItems = _data;\r\n        }\r\n      }\r\n    } else {\r\n      this.selectedItems = [];\r\n    }\r\n    this.onChangeCallback(value);\r\n  }\r\n\r\n  // From ControlValueAccessor interface\r\n  registerOnChange(fn: any) {\r\n    this.onChangeCallback = fn;\r\n  }\r\n\r\n  // From ControlValueAccessor interface\r\n  registerOnTouched(fn: any) {\r\n    this.onTouchedCallback = fn;\r\n  }\r\n\r\n  // Set touched on blur\r\n  @HostListener('blur')\r\n  public onTouched() {\r\n    this.closeDropdown();\r\n    this.onTouchedCallback();\r\n  }\r\n\r\n  trackByFn(index, item) {\r\n    return item.id;\r\n  }\r\n\r\n  isSelected(clickedItem: ListItem) {\r\n    let found = false;\r\n    this.selectedItems.forEach(item => {\r\n      if (clickedItem.id === item.id) {\r\n        found = true;\r\n      }\r\n    });\r\n    return found;\r\n  }\r\n\r\n  isLimitSelectionReached(): boolean {\r\n    return this._settings.limitSelection === this.selectedItems.length;\r\n  }\r\n\r\n  isAllItemsSelected(): boolean {\r\n    return this._data.length === this.selectedItems.length;\r\n  }\r\n\r\n  showButton(): boolean {\r\n    if (!this._settings.singleSelection) {\r\n      if (this._settings.limitSelection > 0) {\r\n        return false;\r\n      }\r\n      // this._settings.enableCheckAll = this._settings.limitSelection === -1 ? true : false;\r\n      return true; // !this._settings.singleSelection && this._settings.enableCheckAll && this._data.length > 0;\r\n    } else {\r\n      // should be disabled in single selection mode\r\n      return false;\r\n    }\r\n  }\r\n\r\n  itemShowRemaining(): number {\r\n    return this.selectedItems.length - this._settings.itemsShowLimit;\r\n  }\r\n\r\n  addSelected(item: ListItem) {\r\n    if (this._settings.singleSelection) {\r\n      this.selectedItems = [];\r\n      this.selectedItems.push(item);\r\n    } else {\r\n      this.selectedItems.push(item);\r\n    }\r\n    this.onChangeCallback(this.emittedValue(this.selectedItems));\r\n    this.onSelect.emit(this.emittedValue(item));\r\n  }\r\n\r\n  removeSelected(itemSel: ListItem) {\r\n    this.selectedItems.forEach(item => {\r\n      if (itemSel.id === item.id) {\r\n        this.selectedItems.splice(this.selectedItems.indexOf(item), 1);\r\n      }\r\n    });\r\n    this.onChangeCallback(this.emittedValue(this.selectedItems));\r\n    this.onDeSelect.emit(this.emittedValue(itemSel));\r\n  }\r\n\r\n  emittedValue(val: any): any {\r\n    const selected = [];\r\n    if (Array.isArray(val)) {\r\n      val.map(item => {\r\n        if (item.id === item.text) {\r\n          selected.push(item.text);\r\n        } else {\r\n          selected.push(this.objectify(item));\r\n        }\r\n      });\r\n    } else {\r\n      if (val) {\r\n        if (val.id === val.text) {\r\n          return val.text;\r\n        } else {\r\n          return this.objectify(val);\r\n        }\r\n      }\r\n    }\r\n    return selected;\r\n  }\r\n\r\n  objectify(val: ListItem) {\r\n    const obj = {};\r\n    obj[this._settings.idField] = val.id;\r\n    obj[this._settings.textField] = val.text;\r\n    return obj;\r\n  }\r\n\r\n  toggleDropdown(evt) {\r\n    evt.preventDefault();\r\n    if (this.disabled && this._settings.singleSelection) {\r\n      return;\r\n    }\r\n    this.isDropdownOpen = !this.isDropdownOpen;\r\n  }\r\n\r\n  closeDropdown() {\r\n    this.isDropdownOpen = false;\r\n    // clear search text\r\n    if (this._settings.clearSearchFilter) {\r\n      this.filter.text = '';\r\n    }\r\n  }\r\n\r\n  toggleSelectAll() {\r\n    if (this.disabled) {\r\n      return false;\r\n    }\r\n    if (!this.isAllItemsSelected()) {\r\n      this.selectedItems = this._data.slice();\r\n      this.onSelectAll.emit(this.emittedValue(this.selectedItems));\r\n    } else {\r\n      this.selectedItems = [];\r\n      this.onDeSelectAll.emit(this.emittedValue(this.selectedItems));\r\n    }\r\n    this.onChangeCallback(this.emittedValue(this.selectedItems));\r\n  }\r\n}\r\n","import {Directive, ElementRef, Output, EventEmitter, HostListener} from '@angular/core';\r\n\r\n@Directive({\r\n    selector: '[clickOutside]'\r\n})\r\nexport class ClickOutsideDirective {\r\n    constructor(private _elementRef: ElementRef) {\r\n    }\r\n\r\n    @Output()\r\n    public clickOutside = new EventEmitter<MouseEvent>();\r\n\r\n    @HostListener('document:click', ['$event', '$event.target'])\r\n    public onClick(event: MouseEvent, targetElement: HTMLElement): void {\r\n        if (!targetElement) {\r\n            return;\r\n        }\r\n\r\n        const clickedInside = this._elementRef.nativeElement.contains(targetElement);\r\n        if (!clickedInside) {\r\n            this.clickOutside.emit(event);\r\n        }\r\n    }\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\n\r\nimport { ListItem } from './multiselect.model';\r\n\r\n@Pipe({\r\n    name: 'ng2ListFilter',\r\n    pure: false\r\n})\r\nexport class ListFilterPipe implements PipeTransform {\r\n    transform(items: ListItem[], filter: ListItem): ListItem[] {\r\n        if (!items || !filter) {\r\n            return items;\r\n        }\r\n        return items.filter((item: ListItem) => this.applyFilter(item, filter));\r\n    }\r\n\r\n    applyFilter(item: ListItem, filter: ListItem): boolean {\r\n        return !(filter.text && item.text && item.text.toLowerCase().indexOf(filter.text.toLowerCase()) === -1);\r\n    }\r\n}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { MultiSelectComponent } from './multiselect.component';\r\nimport { ClickOutsideDirective } from './click-outside.directive';\r\nimport { ListFilterPipe } from './list-filter.pipe';\r\n\r\n@NgModule({\r\n  imports: [CommonModule, FormsModule],\r\n  declarations: [MultiSelectComponent, ClickOutsideDirective, ListFilterPipe],\r\n  exports: [MultiSelectComponent]\r\n})\r\n\r\nexport class NgMultiSelectDropDownModule {\r\n    static forRoot(): ModuleWithProviders {\r\n      return {\r\n        ngModule: NgMultiSelectDropDownModule\r\n      };\r\n    }\r\n}\r\n"]}